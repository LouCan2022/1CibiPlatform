@layout PhilSysLayout
@page "/philsys/idv/liveness/{HashToken}"
@using MudBlazor
@inject IJSRuntime JS
@inject IPhilSysService IPhilSysService

<PageTitle>Face Liveness Session</PageTitle>

<div class="philsys-liveness-container">

    @if (_status == null || !Exists || isTransacted)
    {
        <NotFoundComponent WebHookUrl="@webHookUrl"></NotFoundComponent>
    }
    else if (isExpired)
    {
        <ReTransactComponent WebHookUrl="@webHookUrl"></ReTransactComponent>
    }
    else if (!_completed)
    {
        <LivenessCheckComponent OnClick="StartLiveness"></LivenessCheckComponent>
    }
    else
    {
        <PageTitle>Verification Result</PageTitle>
        <PhilSysResultComponent VerificationResult="information" WebHookUrl="@webHookUrl"></PhilSysResultComponent>
    }

    @if (showLoader)
    {
        <PhilSysLoaderComponent></PhilSysLoaderComponent>
    }

</div>

@code {
    [Parameter] 
    public required string HashToken { get; set; }
    private UpdateFaceLivenessSessionResponseDTO? information;
    private TransactionStatusResponse? _status;
    private bool _completed = false;
    private bool IsExpired = false;
    private bool isTransacted  = false;
    private bool Exists = false;
    private bool isExpired = false;
    private bool showLoader = false;
    private string? webHookUrl;
    private DotNetObjectReference<PhilSysLiveness>? _dotNetRef;

    protected override async Task OnInitializedAsync()
    {
        _status = await IPhilSysService.GetTransactionStatusAsync(HashToken);

        if (_status == null)
        {
            Console.WriteLine($"❌ No transaction found for HashToken: {_status!.IsTransacted}");
            return;
        }

        webHookUrl = _status.WebHookUrl;
        isTransacted = _status.IsTransacted;
        Exists = _status.Exists;
        isExpired = _status.isExpired;

        if (_status.isExpired)
        {
            await IPhilSysService.DeleteTransactionAsync(HashToken);
            return;
        }
    }

    private async Task StartLiveness()
    {
        _status = await IPhilSysService.GetTransactionStatusAsync(HashToken);

        if (_status == null)
        {
            Console.WriteLine("❌ No transaction found for this TID.");
            return;
        }

        if (_status.isExpired)
        {
            isExpired = true;
            await IPhilSysService.DeleteTransactionAsync(HashToken);
            StateHasChanged();
            
            return; 
        }

        _dotNetRef = DotNetObjectReference.Create(this);
        await JS.InvokeVoidAsync("startLivenessInterop", HashToken, _dotNetRef);
    }

    [JSInvokable]
    public async Task OnLivenessCompleted(string sessionId)
    {
        showLoader = true;
        StateHasChanged();

        information = await IPhilSysService.UpdateFaceLivenessSessionAsync(HashToken, sessionId);
        _completed = true;

        if (information == null)
        {
            Console.WriteLine("❌ Error while updating liveness session.");
        }
    
        showLoader = false;
        Console.WriteLine($"Successully Updated the session ID.");
        StateHasChanged();
    }

    public void Dispose() => _dotNetRef?.Dispose();
}
