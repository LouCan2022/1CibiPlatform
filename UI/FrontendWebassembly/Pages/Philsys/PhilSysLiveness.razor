@layout PhilSysLayout
@page "/philsys/idv/liveness/{Tid:guid}"
@using MudBlazor
@inject IJSRuntime JS
@inject IPhilSysService IPhilSysService

@if (_status == null || !Exists || isTransacted)
{
    <NotFoundComponent></NotFoundComponent>
}
else if (isExpired)
{
    <ReTransactComponent></ReTransactComponent>
}
else if (!_completed)
{
    <MudPaper Class="p-6 text-center background-color: var(--mud-palette-surface) !important; mx-auto p-6 mt-0 philsys-card form-container justify-center align-center"
              Elevation="6"
              Style="background-color: var(--mud-palette-surface) !important; border-radius:20px; padding: 15px; box-shadow:0px 10px 45px rgba(0,0,0,0.1); width:400px; max-width:90%;">
        <MudText Typo="Typo.h5" Class="mb-4" Style="color: var(--mud-palette-text-primary);">
            Liveness Check
        </MudText>
        <MudText Typo="Typo.subtitle1" Class="mb-4" Style="color: var(--mud-palette-text-secondary);">
            Click the button below to start the liveness verification process.
        </MudText>
        <ButtonComponent OnClick="StartLiveness" Class="theme-button theme-button-active">
            <MudIcon Icon="@Icons.Material.Filled.PhotoCamera" Class="mr-2" />
            Start Liveness
        </ButtonComponent>
    </MudPaper>
}
else
{
    <PhilSysResultComponent VerificationResult="information"></PhilSysResultComponent>
}

@code {
    private UpdateFaceLivenessSessionResponseDTO? information;
    private TransactionStatusResponse? _status;
    private bool _completed = false;
    private bool IsExpired = false;
    private bool isTransacted  = false;
    private bool Exists = false;
    private bool isExpired = false;
    private DotNetObjectReference<PhilSysLiveness>? _dotNetRef;

    [Parameter] public Guid Tid { get; set; }
    [SupplyParameterFromQuery(Name = "session")] public string? SessionId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _status = await IPhilSysService.GetTransactionStatusAsync(Tid);

        if (_status == null)
        {
            Console.WriteLine($"❌ No transaction found for TID: {_status!.IsTransacted}");
            return;
        }
        isTransacted = _status.IsTransacted;
        Exists = _status.Exists;
        isExpired = _status.isExpired;
        if (_status.isExpired)
        {
            await IPhilSysService.DeleteTransactionAsync(Tid);
            return;
        }

    }

    private async Task StartLiveness()
    {
        _status = await IPhilSysService.GetTransactionStatusAsync(Tid);

        if (_status == null)
        {
            Console.WriteLine("❌ No transaction found for this TID.");
            return;
        }

        if (_status.isExpired)
        {
            isExpired = true;
            await IPhilSysService.DeleteTransactionAsync(Tid);
            StateHasChanged();
            
            return; 
        }

        _dotNetRef = DotNetObjectReference.Create(this);
        await JS.InvokeVoidAsync("startLivenessInterop", Tid, _dotNetRef);
    }

    [JSInvokable]
    public async Task OnLivenessCompleted(string sessionId)
    {
        SessionId = sessionId;
        _completed = true;
        information = await IPhilSysService.UpdateFaceLivenessSessionAsync(Tid, sessionId);
        Console.WriteLine($"✅ Received session ID: {sessionId}");
        StateHasChanged();
    }

    public void Dispose() => _dotNetRef?.Dispose();
}
