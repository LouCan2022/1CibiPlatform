@layout PhilSysLayout
@page "/philsys/idv/liveness/{HashToken}"
@using MudBlazor
@inject IJSRuntime JS
@inject IPhilSysService IPhilSysService

<div class="philsys-liveness-container">
@if (_status == null || !Exists || isTransacted)
{
    <NotFoundComponent></NotFoundComponent>
}
else if (isExpired)
{
    <ReTransactComponent></ReTransactComponent>
}
else if (!_completed)
{

    <MudPaper Class="p-10 text-center d-flex flex-column justify-center align-center"
                Elevation="6"
                Style="border-radius:20px; padding: 15px; box-shadow:0px 10px 45px rgba(0,0,0,0.1); width:400px; max-width:90%;">
        <MudText Typo="Typo.h5" Class="mb-4">
            Liveness Check
        </MudText>
        <MudText Typo="Typo.subtitle1" Class="mb-4">
            Click the button below to start the liveness verification process.
        </MudText>
        <ButtonComponent OnClick="StartLiveness" Class="theme-button theme-button-active">
            <MudIcon Icon="@Icons.Material.Filled.PhotoCamera" Class="mr-2" />
            Start Liveness
        </ButtonComponent>
    </MudPaper>

}
else
{
 
    <PhilSysResultComponent VerificationResult="information"></PhilSysResultComponent>

}

@if (showLoader)
{

    <PhilSysLoaderComponent></PhilSysLoaderComponent>
}
</div>

@code {
    [Parameter] public required string HashToken { get; set; }
    [SupplyParameterFromQuery(Name = "session")] public string? SessionId { get; set; }
    private UpdateFaceLivenessSessionResponseDTO? information;
    private TransactionStatusResponse? _status;
    private bool _completed = false;
    private bool IsExpired = false;
    private bool isTransacted  = false;
    private bool Exists = false;
    private bool isExpired = false;
    private bool showLoader = false;
    private DotNetObjectReference<PhilSysLiveness>? _dotNetRef;

    protected override async Task OnInitializedAsync()
    {
        _status = await IPhilSysService.GetTransactionStatusAsync(HashToken);

        if (_status == null)
        {
            Console.WriteLine($"❌ No transaction found for HashToken: {_status!.IsTransacted}");
            return;
        }

        isTransacted = _status.IsTransacted;
        Exists = _status.Exists;
        isExpired = _status.isExpired;

        if (_status.isExpired)
        {
            await IPhilSysService.DeleteTransactionAsync(HashToken);
            return;
        }
    }

    private async Task StartLiveness()
    {
        _status = await IPhilSysService.GetTransactionStatusAsync(HashToken);

        if (_status == null)
        {
            Console.WriteLine("❌ No transaction found for this TID.");
            return;
        }

        if (_status.isExpired)
        {
            isExpired = true;
            await IPhilSysService.DeleteTransactionAsync(HashToken);
            StateHasChanged();
            
            return; 
        }

        _dotNetRef = DotNetObjectReference.Create(this);
        await JS.InvokeVoidAsync("startLivenessInterop", HashToken, _dotNetRef);
    }

    [JSInvokable]
    public async Task OnLivenessCompleted(string sessionId)
    {
        SessionId = sessionId;
        showLoader = true;
        StateHasChanged();

        try
        {
            information = await IPhilSysService.UpdateFaceLivenessSessionAsync(HashToken, sessionId);
            _completed = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error while updating liveness session: {ex.Message}");
        }
        finally
        {
            showLoader = false;
            Console.WriteLine($"✅ Received session ID: {sessionId}");
            StateHasChanged();
        }
    }

    public void Dispose() => _dotNetRef?.Dispose();
}
