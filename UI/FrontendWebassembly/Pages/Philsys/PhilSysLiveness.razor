
@layout PhilSysLayout
@page "/philsys/idv/liveness/{Tid:guid}"
@using MudBlazor
@inject IJSRuntime JS
@inject IPhilSysService IPhilSysService

@if (!_completed)
{
<MudPaper Class="p-6 text-center background-color: var(--mud-palette-surface) !important; mx-auto p-6 mt-0 philsys-card form-container justify-center align-center"
                Elevation="6"
            Style="background-color: var(--mud-palette-surface) !important; border-radius:20px; padding: 15px; box-shadow:0px 10px 45px rgba(0,0,0,0.1); width:400px; max-width:90%; ">

        <MudText Typo="Typo.h5" Class="mb-4" Style="color: var(--mud-palette-text-primary);">
            Liveness Check
        </MudText>

        <MudText Typo="Typo.subtitle1" Class="mb-4" Style="color: var(--mud-palette-text-secondary);">
            Click the button below to start the liveness verification process.
        </MudText>

        <ButtonComponent OnClick="StartLiveness" Style="width: 170px; color:white; ">
            <MudIcon Icon="@Icons.Material.Filled.PhotoCamera" Class="mr-2" />
            Start Liveness
        </ButtonComponent>

    </MudPaper>
}
else
{
    <MudText Typo="Typo.h4"
                Align="Align.Center"
                Class="fw-bold"
                Style="font-size:40px;">
        ✅ Liveness Check Completed Successfully!
    </MudText>
}

@code {
    [Parameter]
    public Guid Tid { get; set; } 

    [SupplyParameterFromQuery(Name = "session")]
    public string? SessionId { get; set; }

    private bool _completed = false;
    private DotNetObjectReference<PhilSysLiveness>? _dotNetRef;

    private async Task StartLiveness()
    {
        _dotNetRef = DotNetObjectReference.Create(this);
        await JS.InvokeVoidAsync("startLivenessInterop", Tid, _dotNetRef);
    }

    [JSInvokable]
    public void OnLivenessCompleted(string sessionId)
    {
        SessionId = sessionId;
        _completed = true;

        IPhilSysService.UpdateFaceLivenessSessionAsync(Tid, sessionId);
        Console.WriteLine($"✅ Received session ID: {sessionId}");
        StateHasChanged();
    }

    public void Dispose()
    {
        _dotNetRef?.Dispose();
    }
}

   