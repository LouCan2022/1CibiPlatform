@page "/philsys/idv"
@inject NavigationManager Navigation
@using MudBlazor
@inject IJSRuntime JS
@inherits SecurePageBase
@attribute [RequirePermission(2, 2)]
@* philsys/idv *@

<MudGrid Justify="Justify.Center">
    <MudItem xs="12" sm="10" md="8" lg="6">

        <PhilSysFormTabComponent ActiveTabChanged="ChangeActiveTab" ></PhilSysFormTabComponent>

        <MudPaper Elevation="1" Class="p-4 philsys-form-container" Style="border-radius: 10px;  border: 1px solid gray; max-width: 380px;">
            @if (_activeIndex == 0)
            {
                <BasicInformationFormComponent/>
            }
            else if (_activeIndex == 1)
            {
                <PhilSysCardNumbeFormComponent/>
            }
        </MudPaper>

    </MudItem>
</MudGrid>

@code {
    private int _activeIndex = 0;
    private bool isNavigationLocked = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Lock browser unload (close/reload/tab navigation)
            await SetupNavigationLock();

            // Subscribe to internal navigation changes
            Navigation.LocationChanged += HandleLocationChanged;
        }
    }

    private async Task SetupNavigationLock()
    {
        if (!isNavigationLocked)
        {
            isNavigationLocked = true;
            await JS.InvokeVoidAsync("eval", @"
                window.onbeforeunload = function() {
                    return 'You have an unverified account. Are you sure you want to leave?';
                };
            ");
        }
    }

    private async Task RemoveNavigationLock()
    {
        if (isNavigationLocked)
        {
            isNavigationLocked = false;
            await JS.InvokeVoidAsync("eval", "window.onbeforeunload = null;");
        }
    }

    private async void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        // Avoid recursion
        Navigation.LocationChanged -= HandleLocationChanged;

        try
        {
            if (!e.Location.Contains("/verify-otp"))
            {
                // Ask confirmation for internal navigation
                var confirmed = await JS.InvokeAsync<bool>(
                    "confirm",
                    "You have an unverified account. Are you sure you want to leave?"
                );

                if (!confirmed)
                {
                    // Cancel navigation by forcing back to current page
                    Navigation.NavigateTo("philsys/idv", forceLoad: false);
                }
                else
                {
                    await RemoveNavigationLock();
                }
            }
        }
        finally
        {
            // Re-subscribe for next navigation attempt
            Navigation.LocationChanged += HandleLocationChanged;
        }
    }

    private void ChangeActiveTab(int value)
    {
        _activeIndex = value;
    }
 
}
