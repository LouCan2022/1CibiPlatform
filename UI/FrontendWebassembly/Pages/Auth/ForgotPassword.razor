@page "/forgot-password"
@using MudBlazor
@layout AuthLayout
@inject IAuthService IAuthService
@inject NavigationManager Navigation
@inject LocalStorageService LocalStorageService

@if (!isLoading)
{
    <div class="login-container">
        <MudPaper Class="login-card" Elevation="2">
            <div class="login-header">
                <div class="login-logo">
                    <MudIcon Icon="@Icons.Material.Filled.Lock" Size="Size.Large" Style="color: white;" />
                </div>
                <div class="login-title">One Platform</div>
                <div class="login-subtitle">Forgot your password?</div>
            </div>

            <div class="login-body">
                @if (!isUserValid)
                {
                    <MudAlert Severity="Severity.Error" Elevation="0" Variant="Variant.Filled" Class="mb-4">
                        @errorMessage
                    </MudAlert>
                }
                @if (isSuccess)
                {
                    <MudAlert Severity="Severity.Success" Elevation="0" Variant="Variant.Filled" Class="mb-4">
                        @successMessage
                    </MudAlert>
                }
                <MudForm @ref="form" @bind-IsValid="@formValid">
                    <MudTextField @bind-Value="email"
                                  Label="Email"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Required="true"
                                  RequiredError="Email is required"
                                  InputType="InputType.Email"
                                  Adornment="Adornment.Start"
                                  Validation="@(new Func<string, string>(ValidateEmail))"
                                  AdornmentIcon="@Icons.Material.Filled.Email"
                                  Class="mb-4" />

                    <ButtonComponent ButtonType="ButtonType.Submit"
                                     OnClick="HandleForgotPassword"
                                     Disabled="@(!formValid || isButtonLoading)"
                                     Class="@($"theme-button {(formValid ? "theme-button-active " : "theme-button-inactive")}")">
                        @if (isButtonLoading)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                        }
                        else
                        {
                            <span>Send Reset Link</span>
                        }
                    </ButtonComponent>
                </MudForm>
                <div class="footer-links">
                    Remembered your password? <a href="/login">Sign in</a>
                </div>
            </div>
        </MudPaper>
    </div>
}
else
{
    <MudContainer Class="d-flex justify-center align-center" Style="height:100vh;">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    </MudContainer>
}

@code {
    private MudForm form;
    private bool formValid;
    private bool isLoading = false;
    private bool isButtonLoading = false;
    private bool isUserValid = true;
    private bool isSuccess = false;
    private string email = "";
    private string errorMessage = "";
    private string successMessage = "";

    private string ValidateEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
            return "Email is required";
        if (!email.Contains("@"))
            return "Invalid email format";
        return null;
    }

    private async Task HandleForgotPassword()
    {
        isButtonLoading = true;
        isUserValid = true;
        isSuccess = false;
        errorMessage = "";
        successMessage = "";
        StateHasChanged();
        try
        {
            var user = await IAuthService.ForgotPasswordGetUserId(new GetUserIdForForgotPasswordRequestDTO(email));
            if (!string.IsNullOrEmpty(user.errorMessage))
            {
                isUserValid = false;
                errorMessage = user.errorMessage;
                isButtonLoading = false;
                StateHasChanged();
                return;
            }

            isSuccess = true;
            await LocalStorageService.SetItemAsync<string>("tempUserId", user.UserId.ToString());
            successMessage = "A reset link has been sent to your email.";
        }
        catch (Exception ex)
        {
            isUserValid = false;
            errorMessage = ex.Message;
        }
        isButtonLoading = false;
        StateHasChanged();
    }
}
