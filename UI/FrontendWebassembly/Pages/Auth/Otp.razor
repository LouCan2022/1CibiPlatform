@page "/verify-otp"
@using FrontendWebassembly.Component.Generic
@using FrontendWebassembly.DTO.Auth
@using MudBlazor
@layout AuthLayout
@inject NavigationManager Navigation
@inject IAuthService IAuthService
@inject IJSRuntime JSRuntime
@inject LocalStorageService LocalStorageService
@implements IDisposable

@if (!_isLoading)
{
   <div class="login-container">
       <MudPaper Class="login-card" Elevation="2">
           <div class="login-header">
               <div class="login-logo">
                   <MudIcon Icon="@Icons.Material.Filled.Verified" Size="Size.Large" Style="color: white;" />
               </div>
               <div class="login-title">Verify Your Email</div>
               <div class="login-subtitle">Enter the verification code sent to @email</div>
           </div>
   
           <div class="login-body">
   
               @if (!isOtpValid)
               {
                   <MudAlert Severity="Severity.Error" Elevation="0" Variant="Variant.Filled" Class="mb-4">
                       @errorMessage
                   </MudAlert>
               }

                @if (showSuccessMessage)
               {
                   <MudAlert Severity="Severity.Success" Elevation="0" Variant="Variant.Filled" Class="mb-4">
                       Email verified successfully! Redirecting to login in @redirectCountdown seconds...
                   </MudAlert>
               }


                @if (isResendSuccess)
                {
                    <MudAlert Severity="Severity.Success" Elevation="0" Variant="Variant.Filled" Class="mb-4">
                        New OTP has been sent to your email.
                    </MudAlert>
                }
   
   
             <MudForm @ref="form" @bind-IsValid="@success">
                   <MudTextField @bind-Value="otpCode"
                                 Label="Verification Code"
                                 Variant="Variant.Outlined"
                                 Margin="Margin.Dense"
                                 Required="true"
                                 RequiredError="Verification code is required"
                                 Validation="@(new Func<string, string>(ValidateOtp))"
                                 Adornment="Adornment.Start"
                                 AdornmentIcon="@Icons.Material.Filled.Pin"
                                 MaxLength="6"
                                 Class="mb-4"
                                 Disabled="@isDone"
                                 InputType="InputType.Text"
                                 AutoFocus="true" />
                <MudGrid>
                        <MudItem xs="6">
                            <ButtonComponent ButtonType="ButtonType.Submit"       
                                             OnClick="HandleResendOtp"
                                             Disabled="@isResendLoading"
                                             Color="MudBlazor.Color.Primary"
                                             Variant="Variant.Outlined"
                                             Class="h-100 shadow-sm">
                                @if (isLoading)
                                {
                                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                }
                                else
                                {
                                    <span>Resend OTP</span>
                                }
                            </ButtonComponent>
                        </MudItem>
                        <MudItem xs="6">
                            <ButtonComponent ButtonType="ButtonType.Submit"                                     
                                             OnClick="HandleVerifyOtp"
                                             Disabled="@(!success || isLoading || isDone)"
                                             Class="@($"theme-button {(success ? "theme-button-active" : "theme-button-inactive")}")">
                                @if (isLoading)
                                {
                                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                }
                                else
                                {
                                    <span>Verify Email</span>
                                }
                            </ButtonComponent>
                        </MudItem>
               </MudGrid>

             </MudForm>
   
               <div class="footer-links">
                   Wrong email? <a href="/register">Go back to registration</a>
               </div>
           </div>
       </MudPaper>
   </div>
}
else
{
    <!-- Loading -->
    <MudContainer Class="d-flex justify-center align-center" Style="height: 100vh;">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    </MudContainer>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "email")]
    public string? email { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "userId")]
    public string? userId { get; set; }

    private MudForm form;
    private bool success;
    private bool isLoading = false;
    private bool isResending = false;
    private bool _isLoading = true;
    private bool isDone => showSuccessMessage;
    private bool isResendLoading = false;    
    private bool isResendSuccess = false;

    private string otpCode = "";
    private bool isOtpValid = true;
    private string errorMessage = "";
    private bool showResendSuccess = false;

    private System.Threading.Timer? countdownTimer;
    private bool isNavigationLocked = false;

    private bool showSuccessMessage = false;
    private int redirectCountdown = 5;

    protected override async Task OnInitializedAsync()
    {
        // Check if email parameter exists
        if (string.IsNullOrWhiteSpace(email) && string.IsNullOrWhiteSpace(userId))
        {
            Navigation.NavigateTo("/register", true);
            return;
        }

        var userOtpDetails = new OtpSessionRequestDTO(userId!, email!);

        var isUserOtpValidated = await IAuthService.IsOtpSessionValid(userOtpDetails);

        if (!isUserOtpValidated.isValid)
        {
            await LocalStorageService.RemoveItemAsync("tempUserId");
            await LocalStorageService.RemoveItemAsync("tempUserEmail");
            Navigation.NavigateTo("/login", true);
            return;
        }

        _isLoading = false;

        Navigation.LocationChanged += HandleLocationChanged!;
        await SetupNavigationLock();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SetupNavigationLock();
        }
    }

    private async Task SetupNavigationLock()
    {
        if (!isNavigationLocked)
        {
            isNavigationLocked = true;
            await JSRuntime.InvokeVoidAsync("eval", @"
                window.onbeforeunload = function() {
                    return 'You have an unverified account. Are you sure you want to leave?';
                };
            ");
        }
    }

    private async Task RemoveNavigationLock()
    {
        if (isNavigationLocked)
        {
            isNavigationLocked = false;
            await JSRuntime.InvokeVoidAsync("eval", "window.onbeforeunload = null;");
        }
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        if (!e.Location.Contains("/verify-otp"))
        {
            var confirmed = JSRuntime.InvokeAsync<bool>("confirm", 
                "You have an unverified account. Are you sure you want to leave?").GetAwaiter().GetResult();

            if (!confirmed)
            {
                Navigation.NavigateTo($"/verify-otp?userId={userId}&email={email}", false);
            }
            else
            {
                RemoveNavigationLock().GetAwaiter().GetResult();
            }
        }
    }

    private string ValidateOtp(string otp)
    {
        if (string.IsNullOrWhiteSpace(otp))
            return "Verification code is required";

        if (otp.Length != 6)
            return "Verification code must be 6 characters";

        return null;
    }

    private async Task HandleVerifyOtp()
    {
        SetState();

        try
        {
            var otpDetails = new OtpVerificationRequestDTO(email!, otpCode);

            var result = await IAuthService.OtpVerification(otpDetails);

            if (!result.isValid)
            {
                Console.WriteLine($"OTP Verification Error: {result.errorMessage}");
                isLoading = false;
                isOtpValid = false;
                isResending = false;
                errorMessage = result.errorMessage;
                StateHasChanged();
                return;
            }

            await RemoveNavigationLock();

            // Show success message and start countdown
            isLoading = false;
            showSuccessMessage = true;
            await LocalStorageService.RemoveItemAsync("tempUserId");
            await LocalStorageService.RemoveItemAsync("tempUserEmail");
            StateHasChanged();

            // Start countdown timer
            countdownTimer = new System.Threading.Timer(async _ =>
            {
                redirectCountdown--;

                if (redirectCountdown <= 0)
                {
                    countdownTimer?.Dispose();
                    await InvokeAsync(() =>
                    {
                     
                        Navigation.NavigateTo("/login", true);
                    });
                }
                else
                {
                    await InvokeAsync(StateHasChanged);
                }
            }, null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"OTP Verification Exception: {ex.Message}");
            isLoading = false;
            isOtpValid = false;
            errorMessage = "An unexpected error occurred. Please try again.";
            StateHasChanged();
        }
    }

    private async void HandleResendOtp()
    {
        SetState();

        try
        {
            var otpDetails = new OTPResendRequestDTO(Guid.Parse(userId!), email!);
            var result = await IAuthService.OtpResendAsync(otpDetails);
            if (!result.isSuccess)
            {
                Console.WriteLine($"Resend OTP Error: {result.errorMessage}");
                isLoading = false;
                isOtpValid = false;
                isResendLoading = false;
                errorMessage = result.errorMessage;
                StateHasChanged();
                return;
            }
            isLoading = false;
            isResendLoading = false;
            showResendSuccess = true;
            isResendSuccess = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Resend OTP Exception: {ex.Message}");
            isLoading = false;
            isOtpValid = false;
            isResendLoading = false;
            errorMessage = "An unexpected error occurred. Please try again.";
            StateHasChanged();
        }
    }

    private void SetState()
    {
        isLoading = true;
        isOtpValid = true;
        isResendLoading = true;
        errorMessage = "";
        showResendSuccess = true;
        isResendSuccess = false;
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= HandleLocationChanged;
        RemoveNavigationLock().GetAwaiter().GetResult();
    }

}