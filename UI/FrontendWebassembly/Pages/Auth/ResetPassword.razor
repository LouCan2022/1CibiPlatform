@page "/reset-password"
@using MudBlazor
@using FrontendWebassembly.DTO.Auth
@layout AuthLayout
@inject NavigationManager Navigation
@inject IAuthService IAuthService
@inject LocalStorageService LocalStorageService

@if (!isLoading)
{
    <div class="login-container">
        <MudPaper Class="login-card" Elevation="2">
            <div class="login-header">
                <div class="login-logo">
                    <MudIcon Icon="@Icons.Material.Filled.Lock" Size="Size.Large" Style="color: white;" />
                </div>
                <div class="login-title">One Platform</div>
                <div class="login-subtitle">Reset your password</div>
            </div>
            <div class="login-body">
                @if (!isUserValid)
                {
                    <MudAlert Severity="Severity.Error" Elevation="0" Variant="Variant.Filled" Class="mb-4">
                        @errorMessage
                    </MudAlert>
                }
                @if (isValidationError)
                {
                    <MudAlert Severity="Severity.Error" Elevation="0" Variant="Variant.Filled" Class="mb-4">
                        @errorMessage
                    </MudAlert>
                }
                @if (isSuccess)
                {
                    <MudAlert Severity="Severity.Success" Elevation="0" Variant="Variant.Filled" Class="mb-4">
                        Your password has been reset successfully. Redirecting to login in @redirectCountdown seconds...
                    </MudAlert>
                }
                @if (tokenValid && isUserValid && !isSuccess)
                {
                    <MudForm @ref="form" @bind-IsValid="@formValid">
                        <MudTextField @bind-Value="newPassword" 
                                      Label="New Password" 
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense" 
                                      Required="true" 
                                      RequiredError="Password is required"
                                      InputType="@passwordInput" 
                                      Adornment="Adornment.Start" 
                                      AdornmentIcon="@passwordIcon"
                                      OnAdornmentClick="TogglePasswordVisibility" 
                                      AdornmentAriaLabel="Show Password"
                                      Validation="@(new Func<string, string>(ValidatePassword))" 
                                      Class="mb-3" />

                        <MudTextField @bind-Value="confirmPassword"
                                      Label="Confirm Password" 
                                      Variant="Variant.Outlined"
                                      Margin="Margin.Dense" 
                                      Required="true" 
                                      RequiredError="Confirm password is required"
                                      InputType="@passwordInput" 
                                      Adornment="Adornment.Start" 
                                      AdornmentIcon="@passwordIcon"
                                      OnAdornmentClick="TogglePasswordVisibility" 
                                      AdornmentAriaLabel="Show Password"
                                      Validation="@(new Func<string, string>(ValidateConfirmPassword))" 
                                      Class="mb-4" />

                        <ButtonComponent ButtonType="ButtonType.Submit" 
                                         OnClick="HandleResetPassword"
                                         Disabled="@(!formValid || isButtonLoading || isDisable)"
                                         Class="@($"theme-button {(formValid ? "theme-button-active " : "theme-button-inactive")} mb-4")">
                            @if (isButtonLoading)
                            {
                                <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                            }
                            else
                            {
                                <span>Reset Password</span>
                            }
                        </ButtonComponent>
                    </MudForm>
                }
                <div class="footer-links">
                    <a href="/login">Back to Sign in</a>
                </div>
            </div>
        </MudPaper>
    </div>
}
else
{
    <MudContainer Class="d-flex justify-center align-center" Style="height:100vh;">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    </MudContainer>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "token")]
    public string? token { get; set; }

    private MudForm form;
    private bool formValid;
    private bool isLoading = false;
    private bool isButtonLoading = false;
    private bool isDisable = false;
    private bool isUserValid = true;
    private bool isValidationError = false;
    private bool isSuccess = false;
    private string errorMessage = "";
    private string successMessage = "";
    private string newPassword = "";
    private string confirmPassword = "";
    private bool isPasswordVisible = false;
    private InputType passwordInput = InputType.Password;
    private string passwordIcon = Icons.Material.Filled.VisibilityOff;
    private Guid userId = Guid.Empty;
    private bool tokenValid = false;
    private int redirectCountdown = 5;
    private System.Threading.Timer? countdownTimer;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(token))
        {
            isUserValid = false;
            errorMessage = "Invalid or missing token.";
            return;
        }
        isLoading = true;
        var tokenResponse = await IAuthService.IsForgotPasswordTokenValid(new ForgotPasswordTokenRequestDTO(token));

        if (!tokenResponse.IsValid)
        {
            isUserValid = false;
            errorMessage = tokenResponse.errorMessage ?? "Invalid or expired token.";
            isLoading = false;
            await LocalStorageService.RemoveItemAsync("tempUserId");
            return;
        }

        var userIdStr = await LocalStorageService.GetItemAsync<string>("tempUserId");
        Guid.TryParse(userIdStr, out userId);
        tokenValid = true;
        isLoading = false;
    }

    private void TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
        passwordInput = isPasswordVisible ? InputType.Text : InputType.Password;
        passwordIcon = isPasswordVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
    }

    private string ValidatePassword(string password)
    {
        if (string.IsNullOrWhiteSpace(password))
            return "Password is required";
        if (password.Length < 8)
            return "Password must be at least 8 characters";
        // Add more password rules as needed
        return null;
    }

    private string ValidateConfirmPassword(string confirm)
    {
        if (string.IsNullOrWhiteSpace(confirm))
            return "Confirm password is required";
        if (confirm != newPassword)
            return "Passwords do not match";
        return null;
    }

    private async Task HandleResetPassword()
    {
        isButtonLoading = true;
        isUserValid = true;
        isSuccess = false;
        errorMessage = "";
        successMessage = "";
        try
        {
            if (userId == Guid.Empty)
            {
                errorMessage = "User information missing. Please restart the reset process.";
                isUserValid = false;
                isButtonLoading = false;
                isDisable = true;
                StateHasChanged();
                return;
            }
            var updateResponse = await IAuthService.UpdatePassword(new UpdatePasswordRequestDTO(userId, token!, newPassword));

            if (!updateResponse.IsSuccessful)
            {
                errorMessage = updateResponse.errorMessage ?? "Failed to reset password.";
                isValidationError = true;
                isButtonLoading = false;
                StateHasChanged();
                return;
            }
            isValidationError = false;
            isDisable = true;
            isSuccess = true;
            successMessage = "Your password has been reset successfully. You can now sign in.";
            await LocalStorageService.RemoveItemAsync("tempUserId");
            StartCountdown();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            errorMessage = "An unexpected error occurred. Please try again.";
            isButtonLoading = false;
            isUserValid = false;
        }
        isLoading = false;
        StateHasChanged();
    }

    private void StartCountdown()
    {
        countdownTimer = new System.Threading.Timer(async _ =>
        {
            redirectCountdown--;
            if (redirectCountdown <= 0)
            {
                countdownTimer?.Dispose();
                await InvokeAsync(() => Navigation.NavigateTo("/login", true));
            }
            else
            {
                await InvokeAsync(StateHasChanged);
            }
        }, null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1));
    }
}

