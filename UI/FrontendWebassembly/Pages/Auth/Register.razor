@page "/register"
@using FrontendWebassembly.Component.Generic
@using FrontendWebassembly.DTO.Auth
@using MudBlazor
@layout AuthLayout
@inject NavigationManager Navigation
@inject IAuthService IAuthService

@if (!_isLoading)
{
    <div class="login-container">
        <MudPaper Class="login-card" Elevation="2">
            <div class="login-header">
                <div class="login-logo">
                    <MudIcon Icon="@Icons.Material.Filled.PersonAdd" Size="Size.Large" Style="color: white;" />
                </div>
                <div class="login-title">One Platform</div>
                <div class="login-subtitle">Create your account to get started</div>
            </div>

            <div class="login-body">

                @if (!isUserValid)
                {
                    <MudAlert Severity="Severity.Error" Elevation="0" Variant="Variant.Filled" Class="mb-4">
                        @errorMessage
                    </MudAlert>
                }

                <MudForm @ref="form" @bind-IsValid="@success">
                    <MudGrid Spacing="2" Class="mb-2">
                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="firstName"
                                          Label="First Name"
                                          Variant="Variant.Outlined"
                                          Margin="Margin.Dense"
                                          Required="true"
                                          RequiredError="First name is required"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.Person" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="lastName"
                                          Label="Last Name"
                                          Variant="Variant.Outlined"
                                          Margin="Margin.Dense"
                                          Required="true"
                                          RequiredError="Last name is required"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.Person" />
                        </MudItem>
                    </MudGrid>

                    <MudTextField @bind-Value="middleName"
                                  Label="Middle Name (Optional)"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Person"
                                  Class="mb-3" />

                    <MudTextField @bind-Value="email"
                                  Label="Email"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Required="true"
                                  RequiredError="Email is required"
                                  InputType="InputType.Email"
                                  Validation="@(new Func<string, string>(ValidateEmail))"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Email"
                                  Class="mb-3" />

                    <MudTextField @bind-Value="password"
                                  Label="Password"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Required="true"
                                  RequiredError="Password is required"
                                  InputType="@passwordInput"
                                  Validation="@(new Func<string, string>(ValidatePassword))"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@passwordIcon"
                                  OnAdornmentClick="TogglePasswordVisibility"
                                  AdornmentAriaLabel="Show Password"
                                  Class="mb-3" />

                    <MudTextField @bind-Value="confirmPassword"
                                  Label="Confirm Password"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Required="true"
                                  RequiredError="Please confirm your password"
                                  InputType="@confirmPasswordInput"
                                  Validation="@(new Func<string, string>(ValidateConfirmPassword))"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@confirmPasswordIcon"
                                  OnAdornmentClick="ToggleConfirmPasswordVisibility"
                                  AdornmentAriaLabel="Show Password"
                                  Class="mb-4" />

                    <ButtonComponent ButtonType="ButtonType.Submit"
                                     Style="@($"login-button {(success ? "login-button-active" : "login-button-inactive")}")"
                                     OnClick="HandleRegister"
                                     Disabled="@(!success || isLoading)"
                                     Class="rounded-5">
                        @if (isLoading)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                        }
                        else
                        {
                            <span>Create Account</span>
                        }
                    </ButtonComponent>
                </MudForm>

                <div class="footer-links">
                    Already have an account? <a href="/login">Sign in</a>
                </div>
            </div>
        </MudPaper>
    </div>
}
else
{
    <!-- Loading -->
    <MudContainer Class="d-flex justify-center align-center" Style="height: 100vh;">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    </MudContainer>
}

@code {
    private MudForm form;
    private bool success;
    private bool isLoading = false;
    private bool _isLoading = true;

    private string firstName = "";
    private string lastName = "";
    private string middleName = "";
    private string email = "";
    private string password = "";
    private string confirmPassword = "";
    private bool isUserValid = true;
    private string errorMessage = "";

    private bool isPasswordVisible = false;
    private InputType passwordInput = InputType.Password;
    private string passwordIcon = Icons.Material.Filled.VisibilityOff;

    private bool isConfirmPasswordVisible = false;
    private InputType confirmPasswordInput = InputType.Password;
    private string confirmPasswordIcon = Icons.Material.Filled.VisibilityOff;

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await IAuthService.IsAuthenticated();

        if (isAuthenticated)
        {
            Navigation.NavigateTo("/", true);
            return;
        }

        _isLoading = false;
    }

    private void TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
        passwordInput = isPasswordVisible ? InputType.Text : InputType.Password;
        passwordIcon = isPasswordVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
    }

    private void ToggleConfirmPasswordVisibility()
    {
        isConfirmPasswordVisible = !isConfirmPasswordVisible;
        confirmPasswordInput = isConfirmPasswordVisible ? InputType.Text : InputType.Password;
        confirmPasswordIcon = isConfirmPasswordVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
    }

    private string ValidateEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
            return "Email is required";

        if (!email.Contains("@"))
            return "Invalid email format";

        return null;
    }

    private string ValidatePassword(string password)
    {
        if (string.IsNullOrWhiteSpace(password))
            return "Password is required";

        if (password.Length < 8)
            return "Password must be at least 8 characters";

        return null;
    }

    private string ValidateConfirmPassword(string confirmPassword)
    {
        if (string.IsNullOrWhiteSpace(confirmPassword))
            return "Please confirm your password";

        if (confirmPassword != password)
            return "Passwords do not match";

        return null;
    }

    private async Task HandleRegister()
    {
        isLoading = true;
        isUserValid = true;
        errorMessage = "";

        try
        {
            var registerData = new RegisterRequestDTO(
                Email: email,
                PasswordHash: password,
                FirstName: firstName,
                LastName: lastName,
                MiddleName: string.IsNullOrWhiteSpace(middleName) ? null : middleName
            );

            var result = await IAuthService.Register(registerData);

            if (!string.IsNullOrWhiteSpace(result.errorMessage))
            {
                Console.WriteLine($"Register Error: {result.errorMessage}");
                isLoading = false;
                isUserValid = false;
                errorMessage = result.errorMessage;
                StateHasChanged();
                return;
            }

            Navigation.NavigateTo($"/verify-otp?userId={result.id}&email={result.email}", true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Register Exception: {ex.Message}");
            isLoading = false;
            isUserValid = false;
            errorMessage = "An unexpected error occurred. Please try again.";
            StateHasChanged();
            return;
        }
    }
}