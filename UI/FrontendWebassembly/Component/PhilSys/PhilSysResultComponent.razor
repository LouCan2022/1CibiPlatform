@layout PhilSysLayout
@using MudBlazor
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
<MudPaper Class="p-8 text-center form-container"
          Elevation="6"
          Style="
              position: relative;
              border-radius: 20px;
              padding: 25px;
              box-shadow: 0px 10px 45px rgba(0,0,0,0.1);
              width: 100%;
              max-width: 950px;
              margin: auto;
              display: grid;
              grid-template-columns: 250px 1fr 1fr;
              grid-template-rows: auto auto;
              gap: 30px 25px;
              align-items: start;">

    <!-- COLUMN 1, ROW 1: Image + API Button -->
    <div style="grid-column: 1; grid-row: 1;">
        <div class="d-flex flex-column align-items-center">
            <MudPaper Elevation="0"
                      Class="d-flex justify-center align-center mb-2"
                      Style="width: 200px; height: 200px; background-color: var(--mud-palette-background); border-radius: 12px;">
                <MudImage Src="@(string.IsNullOrWhiteSpace(FaceUrl) ? "images/generic/default_picture.jpg" : FaceUrl)"
                          Alt="User Profile"
                          Style="width: 100%; height: 100%; object-fit: cover; border-radius: 12px; outline: 2px solid #000;" />
            </MudPaper>

            @if (!string.IsNullOrEmpty(VerificationResult!.reference))
            {
                <ButtonComponent StartIcon="@Icons.Material.Filled.Download"
                                 OnClick="DownloadApiResponse"
                                 Class="theme-button theme-button-active"
                                 Style="width: 180px;">
                    API Response
                </ButtonComponent>
            }
            
        </div>
    </div>

    <!-- COLUMN 2, ROW 1: Labels -->
    <div style="grid-column: 2; grid-row: 1;">
        <table style="width: 100%; border-collapse: collapse;">
            @if (InfoRows != null)
            {
                @foreach (var row in InfoRows)
                {
                    <tr>
                        <td style="padding: 6px 8px; vertical-align: top;">
                            <MudText Typo="Typo.body1" Style="text-align: left;">
                                @row.Label
                            </MudText>
                        </td>
                    </tr>
                }
            }
        </table>
    </div>

    <!-- COLUMN 3, ROW 1: Values -->
    <div style="grid-column: 3; grid-row: 1;">
        <table style="width: 100%; border-collapse: collapse;">
            @if (InfoRows != null)
            {
                @foreach (var row in InfoRows)
                {
                    <tr>
                        <td style="padding: 6px 8px;">
                            <MudText Typo="Typo.body1"
                                     Style="color: var(--mud-palette-text-primary); font-weight: bold; text-align: left;">
                                @((string.IsNullOrWhiteSpace(row.Value) ? "No Data Found" : row.Value))
                            </MudText>
                        </td>
                    </tr>
                }
            }
        </table>
    </div>

    <!-- COLUMN 3, ROW 2: Verification Tag (Name Tag Style) -->
    <div style="grid-column: 1; grid-row: 2; align-content: center;">
        @if (!string.IsNullOrEmpty(VerificationResult!.reference))
        {
            <div style=" display: flex;
                            align-items: center;
                            justify-content: center;
                            gap: 6px;
                            background-color: #e8f5e9;
                            color: #2e7d32;
                            border-radius: 8px;
                            padding: 6px 12px;
                            font-weight: 600;
                            font-size: 14px;
                            margin-top: 10px;
                                ">
                <MudIcon Icon="@Icons.Material.Filled.Verified" Size="Size.Small" Color="Color.Success" />
                Verified
            </div>
        }
        else
        {
            <div style="display: flex;
                        align-items: center;
                        justify-content: center;
                        gap: 6px;
                        background-color: #fdecea;
                        color: #c62828;
                        border-radius: 8px;
                        padding: 6px 12px;
                        font-weight: 600;
                        font-size: 14px;
                        margin-top: 10px;">
                <MudIcon Icon="@Icons.Material.Filled.Cancel" Size="Size.Small" Color="Color.Error" />
                Not Verified
            </div>
        }
    </div>

    <!-- COLUMN 3, ROW 2: Search Again button -->
    <div style="grid-column: 3; grid-row: 2; display: flex; justify-content: flex-end;">
        <ButtonComponent StartIcon="@Icons.Material.Filled.Search"
                         Class="theme-button theme-button-active"
                         Style="width: 200px;"
                         Onclick="SearchAgain">
            Search Again
        </ButtonComponent>
    </div>

</MudPaper>



@code {
    [Parameter]
    public UpdateFaceLivenessSessionResponseDTO? VerificationResult { get; set; }

    private List<(string Label, string Value)>? InfoRows;

    private string? FaceUrl;

    protected override void OnInitialized()
    {
        if (VerificationResult == null)
        {
            InfoRows = new List<(string, string)>
        {
            ("Error", "No data available")
        };
            return;
        }
        FaceUrl = VerificationResult.face_url;
        InfoRows = new()
        {
            ("PhilSys Card Number", VerificationResult.reference ?? "No Data Found"),
            ("Digital ID Number", VerificationResult.code ?? "No Data Found"),
            ("First Name", VerificationResult.first_name ?? "No Data Found"),
            ("Middle Name", VerificationResult.middle_name ?? "No Data Found"),
            ("Last Name", VerificationResult.last_name ?? "No Data Found"),
            ("Suffix",  VerificationResult.suffix ?? "No Data Found"),
            ("Gender", VerificationResult.gender ?? "No Data Found"),
            ("Birth Date", VerificationResult.birth_date ?? "No Data Found"),
            ("Place of Birth", VerificationResult.place_of_birth ?? "No Data Found"),
            ("Permanent Address", VerificationResult.full_address ?? "No Data Found"),
            ("Present Address", VerificationResult.present_full_address ?? "No Data Found"),
            ("Marital Status", VerificationResult.marital_status ?? "No Data Found"),
            ("Mobile Number", VerificationResult.mobile_number ?? "No Data Found"),
            ("Email", VerificationResult.email ?? "No Data Found"),
            ("Blood Type", VerificationResult.blood_type ?? "No Data Found")
        };
    }
  
    private async Task DownloadApiResponse()
    {
        if (VerificationResult == null)
            return;

        var json = System.Text.Json.JsonSerializer.Serialize(
            VerificationResult,
            new System.Text.Json.JsonSerializerOptions
            {
                WriteIndented = true 
            });

        var fileName = $"ApiResponse_{DateTime.Now:MM-dd-yyyy}.json";

        await JS.InvokeVoidAsync("downloadFileFromBlazor", fileName, "application/json", json);
    }

    private void SearchAgain()
    {
        NavigationManager.NavigateTo("/philsys/idv");
    }
}
