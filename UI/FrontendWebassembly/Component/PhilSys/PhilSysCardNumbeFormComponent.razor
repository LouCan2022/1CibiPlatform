@using MudBlazor
@inject NavigationManager Navigation
@inject IPhilSysService PhilSysService

<MudForm @ref="pcnForm">
    <MudGrid>
        <MudItem xs="12">
            <MudTextField @bind-Value="identityData!.pcn"
                          @oninput="OnFormChanged"
                          Label="PhilSys Card Number (16-Digits)"
                          Mask="@(new PatternMask("0000-0000-0000-0000"))"
                          Required="true"
                          FullWidth="true"
                          Adornment="Adornment.Start"
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense"
                          Validation="ValidatePCN"
                          Class="philsys-rounded-input" />
        </MudItem>
    </MudGrid>

    <ButtonComponent OnClick="SubmitPCN"
                        Class="theme-button theme-button-active mt-4"
                        Style="border-radius: 4px;">
        Next
    </ButtonComponent>
</MudForm>

@code {
    private IdentityData identityData  = new();
    private MudForm? pcnForm;

    [Parameter] 
    public EventCallback<bool> OnUnsavedChange { get; set; }
    [Parameter] 
    public EventCallback<bool> OnFormSubmitted { get; set; }

    private bool hasUnsavedChanges = false;

    private async Task SubmitPCN()
    {
        await pcnForm!.Validate();
        if (!pcnForm.IsValid)
            return;

        await OnFormSubmitted.InvokeAsync(false);

        var livenessLink = await PhilSysService.PostBasicInformationOrPCN("pcn", identityData!);
        if (!string.IsNullOrEmpty(livenessLink))
        {
            Navigation.NavigateTo(livenessLink, forceLoad: true);
        }
    }

    private string? ValidatePCN(string? value)
    {
        if (string.IsNullOrWhiteSpace(value))
            return "PhilSys Card Number is required";

        string digitsOnly = Regex.Replace(value, @"\D", "");

        identityData!.pcn = digitsOnly;

        if (digitsOnly.Length != 16)
            return "PhilSys Card Number must be exactly 16 digits";

        return null;
    }

    private async Task OnFormChanged(ChangeEventArgs e)
    {
        if (!hasUnsavedChanges)
        {
            hasUnsavedChanges = true;
            await OnUnsavedChange.InvokeAsync(true);
        }
    }

}
