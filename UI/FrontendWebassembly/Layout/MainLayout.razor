﻿@using FrontendWebassembly.ShareData.Auth
@using MudBlazor

@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject IAuthService IAuthService
@inject LocalStorageService LocalStorageService

<style>
    .mud-drawer {
        border-radius: 30px 30px 30px 30px !important;
    }

    .mud-drawer.mud-drawer-open {
        border-radius: 30px !important;
    }

    .mud-appbar {
        border-radius: 15px !important;
    }
</style>

<MudThemeProvider Theme="@_myTheme" @bind-IsDarkMode="@_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
@if (!_isLoading)
{
    <ErrorBoundary>
        <ChildContent>

            <MudLayout>
                <!-- AppBar -->
                <MudAppBar Style="@GetAppBarStyle()">
                    <MudIconButton Icon="@Icons.Material.Filled.Menu" Style="@GetMenuIconStyle()" Edge="Edge.Start" OnClick="@DrawerToggle" />
                    <MudSpacer />
                    <MudIconButton Icon="@(_isDarkMode? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)"
                                   Style="Color.Inherit"
                                   OnClick="@ToggleDarkMode" />
                </MudAppBar>
                <!-- Drawer -->
                <MudDrawer @bind-Open="_drawerOpen"
                           Elevation="1"
                           Style="box-shadow: 0 0 30px rgba(0, 0, 0, 0.25); border-radius: 15px; display: flex; flex-direction: column;">

                    <MudDrawerHeader Style="display: flex; justify-content: center; align-items: center; background: linear-gradient(90deg, #102247 0%, #2a77ae 50%) !important;">
                        <MudImage Src="images/logo/cibi.png"
                                  Alt="Cibi Logo"
                                  Style="width: 125px; height:45px; filter: drop-shadow(0 0 1px white) drop-shadow(0 0 2px white) drop-shadow(0 0 3px white);" />
                    </MudDrawerHeader>

                    <!-- Navigation menu that fills remaining space -->
                    <MudNavMenu Class="flex-grow-1">
                        @for (int i = 0; i < Apps.Count; i++)
                        {
                            var appId = Apps[i];
                            var (path, appDescription, appIcon) = ApplicationListDescriptionIcon.List[appId];

                            var subMenuIds = SubMenus[i];

                            <MudNavGroup Title="@appDescription" Expanded="false" Icon="@appIcon">
                                @foreach (var subId in subMenuIds)
                                {
                                    var (subPath, subDescription, subIcon) = SubMenuList.List[subId];
                                    <MudNavLink Href="@($"{path.ToLower()}/{subPath.ToLower()}")"
                                                Match="NavLinkMatch.Prefix"
                                                Icon="@subIcon">
                                        @subDescription
                                    </MudNavLink>
                                }
                            </MudNavGroup>
                        }
                    </MudNavMenu>

                    <!-- Logout at the very bottom -->
                    <div class="px-4 py-2 mt-auto">
                        <MudNavLink Icon="@Icons.Material.Filled.Logout"
                                    Match="NavLinkMatch.All"
                                    OnClick="HandleLogout">
                            Logout
                        </MudNavLink>
                    </div>
                </MudDrawer>
                <!-- Main content -->
                <MudMainContent>
                    <MudPaper Class="pa-5 ma-5" Elevation="2" Style="border-radius: 15px;">
                        @Body
                    </MudPaper>
                </MudMainContent>
            </MudLayout>

        </ChildContent>
        <ErrorContent Context="exception">
            <MudContainer Class="d-flex flex-column justify-center align-center" Style="height: 100vh; gap: 20px;">
                <MudPaper Class="pa-8" Elevation="3" Style="max-width: 600px; text-align: center;">
                    <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" Size="Size.Large" Class="mb-4" />
                    <MudText Typo="Typo.h4" Color="Color.Error" Class="mb-2">
                        Oops! Something went wrong
                    </MudText>
                    <MudText Typo="Typo.body1" Class="mb-4">
                        We encountered an unexpected error. Please try refreshing the page.
                    </MudText>
                    <MudExpansionPanels>
                        <MudExpansionPanel Text="Error Details">
                            <MudText Typo="Typo.body2" Style="font-family: monospace; white-space: pre-wrap; word-break: break-word;">
                                @exception.Message
                            </MudText>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                    <ButtonComponent OnClick="@(() => Navigation.NavigateTo(Navigation.Uri, true))"
                                     StartIcon="@Icons.Material.Filled.Refresh"
                                     Class="mt-4"
                                     Style="width: 140px;">
                        Reload Page
                    </ButtonComponent>
                </MudPaper>
            </MudContainer>
        </ErrorContent>
    </ErrorBoundary>

}
else
{
    <!-- Loading -->
    <MudContainer Class="d-flex justify-center align-center" Style="height: 100vh;">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    </MudContainer>
}

@code {



    private bool _drawerOpen = true;
    private bool _isDarkMode = false;
    private bool _isLoading = true;

    private const string _appIdKey = "AppId";
    private const string _subMenuKey = "SubMenuId";
    private const string _roleIdKey = "RoleId";

    private List<int> Apps = new List<int>();
    private List<List<int>> SubMenus = new List<List<int>>();
    private List<int> Roles = new List<int>();


    private MudTheme _myTheme = new MudTheme()
    {
        PaletteLight = new PaletteLight()
        {
            Primary = "#667eea",
            Secondary = "#764ba2",
            Background = Colors.Gray.Lighten5,
            Surface = Colors.Shades.White,
            AppbarBackground = "#667eea",
            AppbarText = Colors.Shades.White,
            TextPrimary = Colors.Gray.Darken3
        },
        PaletteDark = new PaletteDark()
        {
            Primary = "#8b9dff",
            Secondary = "#9d6bc7",
            Background = Colors.Gray.Darken4,
            Surface = Colors.Gray.Darken3,
            AppbarBackground = "#5568d3",
            AppbarText = Colors.Shades.White,
            TextPrimary = Colors.Shades.White
        },
        LayoutProperties = new LayoutProperties()
        {
            DefaultBorderRadius = "30px",
            DrawerWidthLeft = "260px",
            AppbarHeight = "69px"
        }
    };

    private void DrawerToggle() => _drawerOpen = !_drawerOpen;
    private async Task ToggleDarkMode()
    {
        _isDarkMode = !_isDarkMode;
        await LocalStorageService.SetItemAsync("isDarkMode", _isDarkMode);
    }

    private string GetAppBarStyle()
    {
        var gradient = _isDarkMode
            ? "linear-gradient(90deg, #68c0d6 0%, #2a77ae 50%, #102247 100%)"
            : "linear-gradient(90deg, #102247 0%, #2a77ae 50%, #68c0d6 100%)";

        // dynamically adjust margin-left if drawer is open
        var marginLeft = _drawerOpen ? "280px" : "20px";
        var marginRight = "20px";

        return $@"
        width: auto !important;
        background: {gradient} !important;
        margin-left: {marginLeft};
        margin-right: {marginRight};
        transition: margin-left 0.3s ease, margin-right 0.3s ease;
    ";
    }


    private string GetMenuIconStyle()
    {
        return _isDarkMode
            ? "color: #102247;"
            : "color: white;";
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var isAuthenticated = await IAuthService.IsAuthenticated();

            if (!isAuthenticated)
            {
                Navigation.NavigateTo("/login", true);

                return;
            }

            Apps = JsonSerializer.Deserialize<List<int>>(await LocalStorageService.GetItemAsync<string>(_appIdKey));
            Console.WriteLine($"Apps: {string.Join(", ", Apps)}");

            SubMenus = JsonSerializer.Deserialize<List<List<int>>>(await LocalStorageService.GetItemAsync<string>(_subMenuKey));
            Console.WriteLine($"SubMenus: {string.Join(", ", SubMenus.SelectMany(sm => sm))}");

            Roles = JsonSerializer.Deserialize<List<int>>(await LocalStorageService.GetItemAsync<string>(_roleIdKey));
            Console.WriteLine($"Roles: {string.Join(", ", Roles)}");

            var stored = await LocalStorageService.GetItemAsync<bool?>("isDarkMode");
            
            _isDarkMode = stored ?? false;

            _isLoading = false;
        }
        catch (Exception ex)
        {
            _isLoading = false;
            Console.WriteLine($"Is loading: {_isLoading}");
            Console.WriteLine($"Authentication Error: {ex.Message}");
            throw;
        }
    }
    private async Task HandleLogout()
    {
        Console.WriteLine("Logging out...");

        try
        {
            var logout = await IAuthService.Logout();


            if (logout)
            {
                Console.WriteLine(logout ? "Logout successful." : "Logout failed.");
                Navigation.NavigateTo("/login", true);

                return;
            }
        }
        catch (Exception ex)
        {
            _isLoading = true;
            Console.WriteLine($"Authentication Error: {ex.Message}");
            throw;
        }
    }

}